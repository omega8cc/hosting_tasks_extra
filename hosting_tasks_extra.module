<?php

/**
 * Implements hook_hosting_tasks().
 */
function hosting_tasks_extra_hosting_tasks() {
  $tasks = array();

  $tasks['site']['flush_cache'] = array(
    'title' => t('Flush all caches'),
    'description' => t('Flushes all caches on this site. This may cause a short load peak on any busy site, so please run it only if you have a good reason to flush caches on demand instead of allowing the site cron to flush them, when scheduled.'),
    'dialog' => TRUE,
  );

  $tasks['site']['rebuild_registry'] = array(
    'title' => t('Rebuild registry'),
    'description' => t('Rebuilds the registry and flushes all caches on this site. On Drupal 7 it will recreate registry tables from scratch. This may cause a short load peak on any busy site, so please run it only if you have a good reason to rebuild registry.'),
    'dialog' => TRUE,
  );

  // Removed to close potential attack vector.
  //   $tasks['site']['run_cron'] = array(
  //     'title' => t('Run drush cron'),
  //     'description' => t('Runs cron locally with drush on this site. It allows you to manually run the cron with longer timeout and higher memory allowed than in standard, web based, scheduled cron Aegir runs for you via cURL request to protected /cron.php URL.'),
  //     'dialog' => TRUE,
  //   );

  $tasks['site']['update'] = array(
    'title' => t('Run db updates'),
    'description' => t('Runs database updates on this site -- but first it will create a hot-backup to be able to revert your site database to the pre-update state in case there will be any problem detected. NOTE: This task is NOT a replacement for proper upgrade workflow and should be used only occasionally.'),
    'dialog' => TRUE,
  );

  $tasks['site']['features_revert_all'] = array(
    'title' => t('Revert features'),
    'description' => t('Reverts all features overrides on this site.'),
    'dialog' => TRUE,
  );

  $tasks['server']['flush_drush_cache'] = array(
    'title' => t('Flush Drush cache'),
    'description' => t('Flushes the Drush cache on this (web) server.'),
  );

  // It is BOA specific currently.
  $tasks['site']['site_health_check'] = array(
    'title' => t('Run health check'),
    'description' => t('Runs health check on this site. Site status along with any problems found will be reported and displayed only in this task log. Make sure to click on the (Expand) links in the task log to review all reported details.'),
    'dialog' => TRUE,
  );

  return $tasks;
}

/**
 * Callback for site action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site_flush_cache_action($node) {
  hosting_add_task($node->nid, 'flush_cache');
}

/**
 * Callback for site action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site_rebuild_registry_action($node) {
  hosting_add_task($node->nid, 'rebuild_registry');
}

/**
 * Callback for site action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site_run_cron_action($node) {
  hosting_add_task($node->nid, 'run_cron');
}

/**
 * Callback for site action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site_update_action($node) {
  hosting_add_task($node->nid, 'update');
}

/**
 * Callback for server action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_server_flush_drush_cache_action($node) {
  hosting_add_task($node->nid, 'flush_drush_cache');
}

/**
 * Callback for site action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site__action($node) {
  hosting_add_task($node->nid, '');
}

/**
 * Implements hook_permission().
 */
function hosting_tasks_extra_permission() {
  return array(
    'create rebuild_registry task' => array(
      'title' => t('create rebuild_registry task'),
    ),
    'create flush_cache task' => array(
      'title' => t('create flush_cache task'),
    ),
    'create run_cron task' => array(
      'title' => t('create run_cron task'),
    ),
    'create update task' => array(
      'title' => t('create update task'),
      'description' => t('Run pending database updates on a site.'),
    ),
    'create flush_drush_cache task' => array(
      'title' => t('create flush_drush_cache task'),
    ),
    'create features_revert_all task' => array(
      'title' => t('create features_revert_all task'),
    ),
    'create site_health_check task' => array(
      'title' => t('create site_health_check task'),
    ),
  );
}

/**
 * Implements hosting_task_TASK_TYPE_form().
 */
function hosting_task_update_form($node) {
  // Gather a list of operations to execute.
  $all_ops = module_invoke_all('hosting_task_update_ops');
  uasort($all_ops, 'element_sort');
  $value = '<div>The following operations will be executed on <em>' . $node->title . '</em>:<br /><ul>';
  foreach ($all_ops as $item) {
    $value .= '<li>' . $item['#description'] . '</li>';
  }
  $value .= '</ul></div>';
  $form['operations'] = array(
    '#value' => $value,
  );

  $platform_node = node_load($node->platform);
  $core_major_version = $platform_node->release->version[0];
  if ($core_major_version >= 8) {
    $form['entity_updates'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run automatic entity schema updates at the end of any update hooks.'),
    );
  }
  return $form;
}

/**
 * Implements hook_hosting_task_update_ops().
 *
 * @see: hosting_task_update_form().
 */
function hosting_tasks_extra_hosting_task_update_ops() {
  return array(
    'site update' => array(
      '#description' => 'Run site updates (update.php).',
      '#weight' => 0,
    ),
  );
}

/**
 * Implements hosting_task_TASK_TYPE_form_validate().
 */
function hosting_task_features_revert_all_form_validate($form, &$form_state) {
  $site = node_load($form_state['values']['nid']);

  // Check if the features module is enabled.
  if (!_hosting_package_site_has_module($site, 'features')) {
    form_set_error('nid', t('You need to enable the Features module on this site and then clear the Drush cache before running this task.'));
  }
}
